"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwilioSmsNotificationSink = void 0;
const twilio_1 = require("twilio");
class TwilioSmsNotificationSink {
    constructor(twilioAccount, senderSmsNumber, subscriberRepository, notificationTypeEligibilityPredicate) {
        this.twilioAccount = twilioAccount;
        this.senderSmsNumber = senderSmsNumber;
        this.subscriberRepository = subscriberRepository;
        this.notificationTypeEligibilityPredicate = notificationTypeEligibilityPredicate;
        this.twilio = new twilio_1.Twilio(twilioAccount.username, twilioAccount.password);
    }
    async push(notification, recipients, { notificationMetadata }) {
        const recipientSmSNumbers = await this.subscriberRepository.findAll(recipients);
        console.log('sms-notif-sink, recipients:\n');
        console.log(recipientSmSNumbers);
        const results = await Promise.allSettled(recipientSmSNumbers
            .filter(({ phoneNumber }) => phoneNumber)
            .filter((it) => this.notificationTypeEligibilityPredicate.isEligible(it, notificationMetadata))
            .map(({ phoneNumber }) => {
            this.twilio.messages
                .create({
                to: phoneNumber,
                from: this.senderSmsNumber,
                body: notification.body,
            })
                .then(() => { });
        }));
        const failedSends = results
            .filter((it) => it.status === 'rejected')
            .map((it) => it);
        if (failedSends.length > 0) {
            console.log(`Failed to send dialect SMS notification to ${failedSends.length} recipient(s), reasons: 
        ${failedSends.map((it) => it.reason)}
        `);
        }
        return;
    }
}
exports.TwilioSmsNotificationSink = TwilioSmsNotificationSink;
