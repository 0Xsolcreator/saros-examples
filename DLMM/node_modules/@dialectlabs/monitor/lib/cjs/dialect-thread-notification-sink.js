"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialectThreadNotificationSink = void 0;
const lodash_1 = require("lodash");
class DialectThreadNotificationSink {
    constructor(sdk, subscriberRepository, notificationTypeEligibilityPredicate) {
        this.sdk = sdk;
        this.subscriberRepository = subscriberRepository;
        this.notificationTypeEligibilityPredicate = notificationTypeEligibilityPredicate;
    }
    async push({ message }, recipients, { notificationMetadata }) {
        const subscribers = await this.subscriberRepository.findAll(recipients);
        const wallets = (0, lodash_1.compact)(subscribers
            .filter((it) => this.notificationTypeEligibilityPredicate.isEligible(it, notificationMetadata))
            .map((it) => it.wallet));
        const results = await Promise.allSettled(wallets.map(async (it) => {
            const thread = await this.sdk.threads.find({
                otherMembers: [it.toBase58()],
            });
            if (!thread) {
                throw new Error(`Cannot send notification for subscriber ${it}, thread does not exist`);
            }
            return thread.send({ text: message });
        }));
        const failedSends = results
            .filter((it) => it.status === 'rejected')
            .map((it) => it);
        if (failedSends.length > 0) {
            console.log(`Failed to send dialect notification to ${failedSends.length} recipients, reasons: 
        ${failedSends.map((it) => it.reason)}
        `);
        }
        return;
    }
}
exports.DialectThreadNotificationSink = DialectThreadNotificationSink;
