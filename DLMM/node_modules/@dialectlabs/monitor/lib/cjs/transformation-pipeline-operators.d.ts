import { MonoTypeOperatorFunction, Observable, OperatorFunction } from 'rxjs';
import { Duration } from 'luxon';
import { Data } from './data-model';
export declare enum PipeLogLevel {
    TRACE = 0,
    DEBUG = 1,
    INFO = 2,
    ERROR = 3
}
export declare function setPipeLogLevel(level: PipeLogLevel): void;
export declare class Operators {
    static Transform: {
        new (): {};
        identity<V, T extends object>(): OperatorFunction<Data<V, T>, Data<V, T>>;
        filter<T_1>(predicate: (data: T_1) => boolean): OperatorFunction<T_1, T_1>;
        map<T_2, R>(mapper: (data: T_2) => R): OperatorFunction<T_2, R>;
    };
    static Window: {
        new (): {};
        fixedSize<V, T extends object>(size: number): OperatorFunction<Data<V, T>, Data<V, T>[]>;
        fixedSizeSliding<V_1, T_1 extends object>(size: number): OperatorFunction<Data<V_1, T_1>, Data<V_1, T_1>[]>;
        fixedTime<V_2, T_2 extends object>(timeSpan: Duration): [OperatorFunction<Data<V_2, T_2>, Observable<Data<V_2, T_2>>>, OperatorFunction<Observable<Data<V_2, T_2>>, Data<V_2, T_2>[]>];
    };
    static Aggregate: {
        new (): {};
        avg<T extends object>(): OperatorFunction<Data<number, T>[], Data<number, T>>;
        max<T_1 extends object>(): OperatorFunction<Data<number, T_1>[], Data<number, T_1>>;
        min<T_2 extends object>(): OperatorFunction<Data<number, T_2>[], Data<number, T_2>>;
    };
    static Trigger: {
        new (): {};
        risingEdge<T extends object>(threshold: number, limit?: number): [OperatorFunction<Data<number, T>, Data<number, T>[]>, OperatorFunction<Data<number, T>[], Data<number, T>[]>, OperatorFunction<Data<number, T>[], Data<number, T>>];
        fallingEdge<T_1 extends object>(threshold: number, limit?: number): [OperatorFunction<Data<number, T_1>, Data<number, T_1>[]>, OperatorFunction<Data<number, T_1>[], Data<number, T_1>[]>, OperatorFunction<Data<number, T_1>[], Data<number, T_1>>];
        increase<T_2 extends object>(threshold: number): [OperatorFunction<Data<number, T_2>, Data<number, T_2>[]>, OperatorFunction<Data<number, T_2>[], Data<number, T_2>[]>, OperatorFunction<Data<number, T_2>[], Data<number, T_2>>];
        decrease<T_3 extends object>(threshold: number): [OperatorFunction<Data<number, T_3>, Data<number, T_3>[]>, OperatorFunction<Data<number, T_3>[], Data<number, T_3>[]>, OperatorFunction<Data<number, T_3>[], Data<number, T_3>>];
    };
    static FlowControl: {
        new (): {};
        rateLimit<T>(time: Duration): MonoTypeOperatorFunction<T>;
        onErrorRetry<T_1>(): [OperatorFunction<T_1, unknown>, MonoTypeOperatorFunction<unknown>];
    };
    static Utility: {
        new (): {};
        log<T>(level: PipeLogLevel, msg?: string): MonoTypeOperatorFunction<T>;
    };
}
