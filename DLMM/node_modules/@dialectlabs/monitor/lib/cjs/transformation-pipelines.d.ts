import { SubscriberEvent, SubscriberState } from './data-model';
import { TransformationPipeline } from './ports';
import { Duration } from 'luxon';
export interface FixedSizeWindow {
    size: number;
}
export interface FixedSizeSlidingWindow {
    size: number;
}
export interface FixedTimeWindow {
    timeSpan: Duration;
}
export type Trigger = RisingEdgeTrigger | FallingEdgeTrigger | IncreaseTrigger | DecreaseTrigger;
export interface RisingEdgeTrigger {
    type: 'rising-edge';
    threshold: number;
    limit?: number;
}
export interface FallingEdgeTrigger {
    type: 'falling-edge';
    threshold: number;
    limit?: number;
}
export interface IncreaseTrigger {
    type: 'increase';
    threshold: number;
}
export interface DecreaseTrigger {
    type: 'decrease';
    threshold: number;
}
export type RateLimit = ThrottleTimeRateLimit;
export interface ThrottleTimeRateLimit {
    type: 'throttle-time';
    timeSpan: Duration;
}
export interface Diff<E> {
    added: E[];
    removed: E[];
}
/**
 * A set of commonly-used pipelines
 */
export interface Change<T> {
    prev: T;
    current: T;
}
export declare class Pipelines {
    static change<T extends object, E extends object>(compareBy: (e1: E, e2: E) => boolean, rateLimit?: RateLimit): TransformationPipeline<E, T, Change<E>>;
    static added<T extends object, E extends object>(compareBy: (e1: E, e2: E) => boolean, rateLimit?: RateLimit): TransformationPipeline<E[], T, E[]>;
    static removed<T extends object, E extends object>(compareBy: (e1: E, e2: E) => boolean, rateLimit?: RateLimit): TransformationPipeline<E[], T, E[]>;
    static diff<T extends object, E extends object>(compareBy: (e1: E, e2: E) => boolean, rateLimit?: RateLimit): TransformationPipeline<E[], T, Diff<E>>;
    static threshold<T extends object>(trigger: Trigger, rateLimit?: RateLimit): TransformationPipeline<number, T, number>;
    static averageInFixedSizeWindowThreshold<T extends object>(window: FixedSizeWindow, trigger: Trigger, rateLimit?: RateLimit): TransformationPipeline<number, T, number>;
    static averageInFixedTimeWindowThreshold<T extends object>(window: FixedTimeWindow, trigger: Trigger, rateLimit?: RateLimit): TransformationPipeline<number, T, number>;
    static averageInFixedSizeSlidingWindowThreshold<T extends object>(window: FixedSizeSlidingWindow, trigger: Trigger, rateLimit?: RateLimit): TransformationPipeline<number, T, number>;
    static notifyNewSubscribers(): TransformationPipeline<SubscriberState, SubscriberEvent, SubscriberState>;
    static createNew<V, T extends object, R>(pipeline: TransformationPipeline<V, T, R>): TransformationPipeline<V, T, R>;
}
