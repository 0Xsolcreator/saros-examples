import { Duration } from 'luxon';
import { MonitorFactory } from '../monitor-factory';
import { DataSource, DataSourceTransformationPipeline, SubscriberRepository } from '../ports';
import { Monitor } from '../monitor-api';
import { SubscriberEvent } from '../data-model';
export declare class DefaultMonitorFactory implements MonitorFactory {
    private readonly subscriberRepository;
    private readonly shutdownHooks;
    constructor(subscriberRepository: SubscriberRepository);
    shutdown(): Promise<any[]>;
    createDefaultMonitor<T extends object>(dataSource: DataSource<T>, datasourceTransformationPipelines: DataSourceTransformationPipeline<T, any>[], pollInterval?: Duration): Monitor<T>;
    createSubscriberEventMonitor(dataSourceTransformationPipelines: DataSourceTransformationPipeline<SubscriberEvent, any>[]): Monitor<SubscriberEvent>;
    private toPushyDataSource;
}
