"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultMonitorFactory = void 0;
const luxon_1 = require("luxon");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const default_monitor_1 = require("./default-monitor");
class DefaultMonitorFactory {
    constructor(subscriberRepository) {
        this.subscriberRepository = subscriberRepository;
        this.shutdownHooks = [];
    }
    async shutdown() {
        return Promise.all(this.shutdownHooks.map((it) => it()));
    }
    createDefaultMonitor(dataSource, datasourceTransformationPipelines, pollInterval = luxon_1.Duration.fromObject({ seconds: 10 })) {
        const pushyDataSource = !('subscribe' in dataSource)
            ? this.toPushyDataSource(dataSource, pollInterval, this.subscriberRepository)
            : dataSource;
        const monitor = new default_monitor_1.DefaultMonitor(pushyDataSource, datasourceTransformationPipelines, this.subscriberRepository);
        this.shutdownHooks.push(() => monitor.stop());
        return monitor;
    }
    createSubscriberEventMonitor(dataSourceTransformationPipelines) {
        const dataSource = new rxjs_1.Observable((subscriber) => this.subscriberRepository.subscribe(({ resourceId }) => subscriber.next({
            groupingKey: resourceId.toBase58(),
            data: {
                resourceId,
                state: 'added',
            },
        }), ({ resourceId }) => subscriber.next({
            groupingKey: resourceId.toBase58(),
            data: {
                resourceId,
                state: 'removed',
            },
        })));
        const monitor = new default_monitor_1.DefaultMonitor(dataSource, dataSourceTransformationPipelines, this.subscriberRepository);
        this.shutdownHooks.push(() => monitor.stop());
        return monitor;
    }
    toPushyDataSource(dataSource, pollInterval, subscriberRepository) {
        const pollTimeoutMs = Math.max(luxon_1.Duration.fromObject({ minutes: 10 }).toMillis(), 3 * pollInterval.toMillis());
        const pollTimeout = luxon_1.Duration.fromObject({ milliseconds: pollTimeoutMs });
        return (0, rxjs_1.timer)(0, pollInterval.toMillis()).pipe((0, rxjs_1.exhaustMap)(() => (0, rxjs_1.from)(subscriberRepository
            .findAll()
            .then((s) => s.map(({ resourceId }) => resourceId)))), (0, rxjs_1.exhaustMap)((resources) => (0, rxjs_1.from)(dataSource(resources))), (0, operators_1.timeout)(pollTimeout.toMillis()), (0, rxjs_1.catchError)((error) => {
            if (error instanceof rxjs_1.TimeoutError) {
                return (0, rxjs_1.throwError)(new Error(`Poll timeout of ${pollTimeout.toISO()} reached. ` + error));
            }
            return (0, rxjs_1.throwError)(error);
        }), (0, rxjs_1.mergeMap)((it) => it));
    }
}
exports.DefaultMonitorFactory = DefaultMonitorFactory;
