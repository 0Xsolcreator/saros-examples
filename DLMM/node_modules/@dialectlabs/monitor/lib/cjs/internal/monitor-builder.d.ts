import { AddSinksStep, AddTransformationsStep, ChooseDataSourceStep, DefineDataSourceStep, NotificationMetadata, NotifyStep, Transformation } from '../monitor-builder';
import { SubscriberEvent } from '../data-model';
import { DataSourceTransformationPipeline, PollableDataSource, PushyDataSource, SubscriberRepository } from '../ports';
import { Duration } from 'luxon';
import { MonitorProps } from '../monitor-api';
import { DialectThreadNotificationSink } from '../dialect-thread-notification-sink';
import { SengridEmailNotificationSink } from '../sengrid-email-notification-sink';
import { TwilioSmsNotificationSink } from '../twilio-sms-notification-sink';
import { TelegramNotificationSink } from '../telegram-notification-sink';
import { SolflareNotificationSink } from '../solflare-notification-sink';
import { DialectSdkNotificationSink } from '../dialect-sdk-notification-sink';
/**
 * A set of factory methods to create monitors
 */
export declare class MonitorsBuilderState<T extends object> {
    readonly subscriberRepository: SubscriberRepository;
    private readonly notificationTypeEligibilityPredicate;
    chooseDataSourceStep?: ChooseDataSourceStepImpl;
    defineDataSourceStep?: DefineDataSourceStepImpl<T>;
    addTransformationsStep?: AddTransformationsStepImpl<T>;
    dialectNotificationSink?: DialectThreadNotificationSink;
    dialectSdkNotificationSink?: DialectSdkNotificationSink;
    emailNotificationSink?: SengridEmailNotificationSink;
    smsNotificationSink?: TwilioSmsNotificationSink;
    telegramNotificationSink?: TelegramNotificationSink;
    solflareNotificationSink?: SolflareNotificationSink;
    static create<T extends object>(monitorProps: MonitorProps): MonitorsBuilderState<T>;
    constructor(monitorProps: MonitorProps, subscriberRepository: SubscriberRepository);
    private createDialectThreadNotificationSink;
    private createDialectSdkNotificationSink;
}
type DataSourceType = 'user-defined' | 'subscriber-events';
export declare class ChooseDataSourceStepImpl implements ChooseDataSourceStep {
    readonly monitorProps: MonitorProps;
    dataSourceType?: DataSourceType;
    constructor(monitorProps: MonitorProps);
    subscriberEvents(): AddTransformationsStep<SubscriberEvent>;
    defineDataSource<T extends object>(): DefineDataSourceStep<T>;
}
type DataSourceStrategy = 'push' | 'poll';
export declare class DefineDataSourceStepImpl<T extends object> implements DefineDataSourceStep<T> {
    private readonly monitorBuilderState;
    dataSourceStrategy?: DataSourceStrategy;
    pushyDataSource?: PushyDataSource<T>;
    pollableDataSource?: PollableDataSource<T>;
    pollInterval?: Duration;
    constructor(monitorBuilderState: MonitorsBuilderState<T>);
    poll(dataSource: PollableDataSource<T>, pollInterval: Duration): AddTransformationsStep<T>;
    push(dataSource: PushyDataSource<T>): AddTransformationsStep<T>;
}
declare class AddTransformationsStepImpl<T extends object> implements AddTransformationsStep<T> {
    readonly monitorBuilderState: MonitorsBuilderState<T>;
    dataSourceTransformationPipelines: DataSourceTransformationPipeline<T, any>[];
    constructor(monitorBuilderState: MonitorsBuilderState<T>);
    notify(metadata?: NotificationMetadata): AddSinksStep<T, T>;
    transform<V, R>(transformation: Transformation<T, V, R>): NotifyStep<T, R>;
}
export {};
