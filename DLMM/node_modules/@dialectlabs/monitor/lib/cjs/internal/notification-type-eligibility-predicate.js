"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultNotificationTypeEligibilityPredicate = exports.NotificationTypeEligibilityPredicate = void 0;
class NotificationTypeEligibilityPredicate {
    static create() {
        return new DefaultNotificationTypeEligibilityPredicate();
    }
}
exports.NotificationTypeEligibilityPredicate = NotificationTypeEligibilityPredicate;
class DefaultNotificationTypeEligibilityPredicate extends NotificationTypeEligibilityPredicate {
    isEligible({ notificationSubscriptions }, metadata) {
        var _a;
        if (!notificationSubscriptions) {
            return true;
        }
        if ((notificationSubscriptions === null || notificationSubscriptions === void 0 ? void 0 : notificationSubscriptions.length) > 0 && !((_a = metadata === null || metadata === void 0 ? void 0 : metadata.type) === null || _a === void 0 ? void 0 : _a.id)) {
            console.warn(`Notification type id must be explicitly set and match dapp notification types configuration. Skipping some notifications...`);
            return false;
        }
        const found = Boolean(notificationSubscriptions.find((subscription) => {
            var _a;
            return subscription.notificationType.id === (metadata === null || metadata === void 0 ? void 0 : metadata.type.id) ||
                subscription.notificationType.humanReadableId.toLowerCase() ===
                    ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.type.id) === null || _a === void 0 ? void 0 : _a.toLowerCase());
        }));
        if (!found && (metadata === null || metadata === void 0 ? void 0 : metadata.type.id)) {
            console.warn(`Unknown notification type ${metadata.type.id}, must be one of [${notificationSubscriptions.map((it) => it.notificationType.humanReadableId)}]`);
        }
        return found;
    }
}
exports.DefaultNotificationTypeEligibilityPredicate = DefaultNotificationTypeEligibilityPredicate;
