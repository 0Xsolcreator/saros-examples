"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemorySubscriberRepository = void 0;
class InMemorySubscriberRepository {
    constructor(delegate, cacheTtl) {
        this.delegate = delegate;
        this.cacheTtl = cacheTtl;
        this.subscribers = new Map();
        this.onSubscriberAddedHandlers = [];
        this.onSubscriberRemovedHandlers = [];
        this.isInitialized = false;
    }
    static decorate(other, cacheTtl) {
        return new InMemorySubscriberRepository(other, cacheTtl);
    }
    async findAll(resourceIds) {
        await this.lazyInit();
        const subscribers = Array(...this.subscribers.values());
        return resourceIds
            ? subscribers.filter(({ resourceId }) => resourceIds.find((it) => it.equals(resourceId)))
            : subscribers;
    }
    async lazyInit() {
        if (this.isInitialized) {
            return;
        }
        await this.initialize();
        this.isInitialized = true;
    }
    async subscribe(onSubscriberAdded, onSubscriberRemoved) {
        await this.lazyInit();
        onSubscriberAdded && this.onSubscriberAddedHandlers.push(onSubscriberAdded);
        onSubscriberRemoved &&
            this.onSubscriberRemovedHandlers.push(onSubscriberRemoved);
    }
    async initialize() {
        setInterval(async () => {
            try {
                await this.updateSubscribers();
            }
            catch (e) {
                console.error('Updating subscribers failed.', e);
            }
        }, this.cacheTtl.toMillis());
        return this.updateSubscribers();
    }
    async updateSubscribers() {
        const subscribers = await this.delegate.findAll();
        const added = subscribers.filter((it) => !this.subscribers.has(it.resourceId.toBase58()));
        subscribers.forEach((subscriber) => {
            this.subscribers.set(subscriber.resourceId.toBase58(), subscriber);
        });
        if (added.length > 0) {
            console.log(`${added.length} subscriber(s) added: [${added.map((it) => it.resourceId)}]`);
            console.debug(`${added.length} subscriber(s) added: ${JSON.stringify(added)}`);
        }
        added.forEach((subscriber) => {
            this.onSubscriberAddedHandlers.forEach((it) => it(subscriber));
            this.subscribers.set(subscriber.resourceId.toBase58(), subscriber);
        });
        const removed = Array.from(this.subscribers.values()).filter((s1) => !subscribers.find((s2) => s2.resourceId.equals(s1.resourceId)));
        if (removed.length > 0) {
            console.log(`${removed.length} subscriber(s) removed: [${removed.map((it) => it.resourceId)}]`);
            console.debug(`${removed.length} subscriber(s) removed: ${JSON.stringify(removed)}`);
        }
        removed.forEach((subscriber) => {
            this.onSubscriberRemovedHandlers.forEach((it) => it(subscriber));
            this.subscribers.delete(subscriber.resourceId.toBase58());
        });
    }
}
exports.InMemorySubscriberRepository = InMemorySubscriberRepository;
