"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultMonitor = void 0;
const rxjs_1 = require("rxjs");
const transformation_pipeline_operators_1 = require("../transformation-pipeline-operators");
class DefaultMonitor {
    constructor(dataSource, dataSourceTransformationPipelines, subscriberRepository) {
        this.dataSource = dataSource;
        this.dataSourceTransformationPipelines = dataSourceTransformationPipelines;
        this.subscriberRepository = subscriberRepository;
        this.started = false;
        this.subscriptions = [];
    }
    async start() {
        if (this.started) {
            console.log('Already started');
            return;
        }
        this.startMonitorPipeline();
        this.started = true;
    }
    stop() {
        if (!this.started) {
            return Promise.resolve();
        }
        this.subscriptions.forEach((it) => it.unsubscribe());
        this.subscriptions = [];
        this.started = false;
        return Promise.resolve();
    }
    async startMonitorPipeline() {
        const monitorPipelineSubscription = this.dataSource
            .pipe((0, rxjs_1.mergeMap)(({ data, groupingKey }) => (0, rxjs_1.from)(this.enrichWithContext(data, groupingKey))), (0, rxjs_1.groupBy)(({ context: { groupingKey } }) => groupingKey, {
            element: (it) => it,
        }), (0, rxjs_1.mergeMap)((data) => this.dataSourceTransformationPipelines.map((pipeline) => pipeline(data.pipe()))), (0, rxjs_1.mergeMap)((it) => it))
            .pipe(...transformation_pipeline_operators_1.Operators.FlowControl.onErrorRetry())
            .subscribe();
        this.subscriptions.push(monitorPipelineSubscription);
    }
    async enrichWithContext(origin, groupingKey) {
        const subscribers = await this.subscriberRepository.findAll();
        return {
            context: {
                origin,
                groupingKey,
                subscribers,
                trace: [],
            },
            value: origin,
        };
    }
}
exports.DefaultMonitor = DefaultMonitor;
