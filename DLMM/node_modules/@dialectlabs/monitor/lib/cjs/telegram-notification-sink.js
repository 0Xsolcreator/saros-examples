"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramNotificationSink = void 0;
const telegraf_1 = require("telegraf");
class TelegramNotificationSink {
    constructor(telegramBotToken, subscriberRepository, notificationTypeEligibilityPredicate) {
        this.telegramBotToken = telegramBotToken;
        this.subscriberRepository = subscriberRepository;
        this.notificationTypeEligibilityPredicate = notificationTypeEligibilityPredicate;
        this.bot = new telegraf_1.Telegraf(telegramBotToken);
    }
    async push(notification, recipients, { notificationMetadata }) {
        const recipientTelegramNumbers = await this.subscriberRepository.findAll(recipients);
        console.log('tg-notif-sink, recipients:\n');
        console.log(recipientTelegramNumbers);
        const results = await Promise.allSettled(recipientTelegramNumbers
            .filter(({ telegramChatId }) => telegramChatId)
            .filter((it) => this.notificationTypeEligibilityPredicate.isEligible(it, notificationMetadata))
            .map(({ telegramChatId }) => {
            this.bot.telegram
                .sendMessage(telegramChatId, notification.body)
                .then(() => { });
        }));
        const failedSends = results
            .filter((it) => it.status === 'rejected')
            .map((it) => it);
        if (failedSends.length > 0) {
            console.log(`Failed to send dialect notification to ${failedSends.length} recipient(s), reasons: 
        ${failedSends.map((it) => it.reason)}
        `);
        }
        return;
    }
}
exports.TelegramNotificationSink = TelegramNotificationSink;
