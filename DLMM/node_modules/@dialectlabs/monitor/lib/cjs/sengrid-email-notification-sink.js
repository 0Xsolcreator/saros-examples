"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SengridEmailNotificationSink = void 0;
const mail_1 = __importDefault(require("@sendgrid/mail"));
class SengridEmailNotificationSink {
    constructor(sengridApiKey, senderEmail, subscriberRepository, notificationTypeEligibilityPredicate) {
        this.sengridApiKey = sengridApiKey;
        this.senderEmail = senderEmail;
        this.subscriberRepository = subscriberRepository;
        this.notificationTypeEligibilityPredicate = notificationTypeEligibilityPredicate;
        mail_1.default.setApiKey(sengridApiKey);
    }
    async push(notification, recipients, { notificationMetadata }) {
        const recipientEmails = await this.subscriberRepository.findAll(recipients);
        console.log('sendgrid-notif-sink, recipients:\n');
        console.log(recipientEmails);
        const emails = recipientEmails
            .filter(({ email }) => Boolean(email))
            .filter((it) => this.notificationTypeEligibilityPredicate.isEligible(it, notificationMetadata))
            .map(({ email }) => ({
            ...notification,
            from: this.senderEmail,
            to: email,
        }));
        const results = await Promise.allSettled(await mail_1.default.send(emails));
        const failedSends = results
            .filter((it) => it.status === 'rejected')
            .map((it) => it);
        if (failedSends.length > 0) {
            console.log(`Failed to send dialect email notification to ${failedSends.length} recipient(s), reasons: 
        ${failedSends.map((it) => it.reason)}
        `);
        }
        return;
    }
}
exports.SengridEmailNotificationSink = SengridEmailNotificationSink;
