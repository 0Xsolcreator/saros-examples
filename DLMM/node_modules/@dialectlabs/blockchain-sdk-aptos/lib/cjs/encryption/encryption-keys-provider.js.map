{"version":3,"file":"encryption-keys-provider.js","sourceRoot":"","sources":["../../../src/encryption/encryption-keys-provider.ts"],"names":[],"mappings":";;;;AAAA,0CAI0B;AAG1B,MAAa,+CAAgD,SAAQ,4BAAsB;IACzF,YACmB,oBAAsD;QAEvE,KAAK,EAAE,CAAC;QAFS,yBAAoB,GAApB,oBAAoB,CAAkC;IAGzE,CAAC;IAEK,WAAW;;YACf,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED,WAAW;QACT,MAAM,IAAI,+BAAyB,CACjC,0BAA0B,EAC1B,wCAAwC,CACzC,CAAC;IACJ,CAAC;IAED,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AArBD,0GAqBC","sourcesContent":["import {\n  DiffeHellmanKeys,\n  EncryptionKeysProvider,\n  UnsupportedOperationError,\n} from '@dialectlabs/sdk';\nimport type { DialectAptosWalletAdapterWrapper } from '../wallet-adapter/dialect-aptos-wallet-adapter-wrapper';\n\nexport class DialectAptosWalletAdapterEncryptionKeysProvider extends EncryptionKeysProvider {\n  constructor(\n    private readonly dialectWalletAdapter: DialectAptosWalletAdapterWrapper,\n  ) {\n    super();\n  }\n\n  async getFailSafe(): Promise<DiffeHellmanKeys | null> {\n    return null;\n  }\n\n  getFailFast(): Promise<DiffeHellmanKeys> {\n    throw new UnsupportedOperationError(\n      'Encryption not supported',\n      'Wallet does not support encryption yet',\n    );\n  }\n\n  isAvailable(): boolean {\n    return false;\n  }\n}\n"]}