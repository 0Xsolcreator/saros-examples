{"version":3,"file":"node-dialect-aptos-wallet-adapter.js","sourceRoot":"","sources":["../../../src/wallet-adapter/node-dialect-aptos-wallet-adapter.ts"],"names":[],"mappings":";;;;AAOA,iCAAqC;AAErC,MAAa,6BAA6B;IAGxC,YAA6B,OAAqB;QAArB,YAAO,GAAP,OAAO,CAAc;IAAG,CAAC;IAEtD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,UAAuB;QACnC,IAAI,UAAU,EAAE;YACd,MAAM,OAAO,GAAG,IAAI,oBAAY,CAAC,UAAU,CAAC,CAAC;YAC7C,OAAO,CAAC,GAAG,CACT,gBACE,6BAA6B,CAAC,IAChC,mBAAmB,OAAO,CAAC,MAAM,EAAE,mBAAmB,OAAO,CAAC,OAAO,EAAE,WAAW,CACnF,CAAC;YACF,OAAO,IAAI,6BAA6B,CAAC,OAAO,CAAC,CAAC;SACnD;aAAM,IAAI,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE;YAC9C,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;YAC1D,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,aAAuB,CAAC,CAAC,CAAC;YACvE,MAAM,OAAO,GAAG,IAAI,oBAAY,CAAC,UAAU,CAAC,CAAC;YAC7C,OAAO,CAAC,GAAG,CACT,gBACE,6BAA6B,CAAC,IAChC,mBAAmB,OAAO,CAAC,MAAM,EAAE,mBAAmB,OAAO,CAAC,OAAO,EAAE,WAAW,CACnF,CAAC;YACF,OAAO,IAAI,6BAA6B,CAAC,OAAO,CAAC,CAAC;SACnD;aAAM;YACL,MAAM,IAAI,KAAK,CACb,sBAAsB,6BAA6B,CAAC,IAAI,oCAAoC,CAC7F,CAAC;SACH;IACH,CAAC;IAEK,WAAW,CAAC,OAAe;;YAC/B,OAAO,IAAI,CAAC,OAAO;iBAChB,UAAU,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC7C,QAAQ,EAAE,CAAC;QAChB,CAAC;KAAA;IAEK,kBAAkB,CACtB,OAA2B;;YAE3B,MAAM,MAAM,GAAG,OAAO,CAAC;YACvB,MAAM,WAAW,GAAG,GAAG,MAAM,cAAc,OAAO,CAAC,OAAO,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC;YACtF,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO;iBAC3B,UAAU,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;iBACjD,QAAQ,EAAE,CAAC;YACd,OAAO;gBACL,MAAM;gBACN,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,WAAW;gBACX,SAAS;aACV,CAAC;QACJ,CAAC;KAAA;CACF;AA7DD,sEA6DC","sourcesContent":["import type {\n  Address,\n  DialectAptosWalletAdapter,\n  PublicKey,\n  SignMessagePayload,\n  SignMessageResponse,\n} from './dialect-aptos-wallet-adapter.interface';\nimport { AptosAccount } from 'aptos';\n\nexport class NodeDialectAptosWalletAdapter\n  implements DialectAptosWalletAdapter\n{\n  constructor(private readonly account: AptosAccount) {}\n\n  get address(): Address {\n    return this.account.address().toString();\n  }\n\n  get publicKey(): PublicKey {\n    return this.account.pubKey().toString();\n  }\n\n  static create(privateKey?: Uint8Array) {\n    if (privateKey) {\n      const account = new AptosAccount(privateKey);\n      console.log(\n        `Initializing ${\n          NodeDialectAptosWalletAdapter.name\n        } using provided ${account.pubKey()} public key and ${account.address()} address.`,\n      );\n      return new NodeDialectAptosWalletAdapter(account);\n    } else if (process.env.DIALECT_SDK_CREDENTIALS) {\n      const privateKeyRaw = process.env.DIALECT_SDK_CREDENTIALS;\n      const privateKey = new Uint8Array(JSON.parse(privateKeyRaw as string));\n      const account = new AptosAccount(privateKey);\n      console.log(\n        `Initializing ${\n          NodeDialectAptosWalletAdapter.name\n        } using provided ${account.pubKey()} public key and ${account.address()} address.`,\n      );\n      return new NodeDialectAptosWalletAdapter(account);\n    } else {\n      throw new Error(\n        `Error initializing ${NodeDialectAptosWalletAdapter.name}: SDK credential must be provided.`,\n      );\n    }\n  }\n\n  async signMessage(message: string): Promise<string> {\n    return this.account\n      .signBuffer(new TextEncoder().encode(message))\n      .toString();\n  }\n\n  async signMessagePayload(\n    payload: SignMessagePayload,\n  ): Promise<SignMessageResponse> {\n    const prefix = `APTOS`;\n    const fullMessage = `${prefix}\\nmessage: ${payload.message}\\nnonce: ${payload.nonce}`;\n    const signature = this.account\n      .signBuffer(new TextEncoder().encode(fullMessage))\n      .toString();\n    return {\n      prefix,\n      message: payload.message,\n      nonce: payload.nonce,\n      fullMessage,\n      signature,\n    };\n  }\n}\n"]}