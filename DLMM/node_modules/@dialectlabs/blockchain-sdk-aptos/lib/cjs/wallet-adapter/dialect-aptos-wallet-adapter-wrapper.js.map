{"version":3,"file":"dialect-aptos-wallet-adapter-wrapper.js","sourceRoot":"","sources":["../../../src/wallet-adapter/dialect-aptos-wallet-adapter-wrapper.ts"],"names":[],"mappings":";;;;AAOA,0CAA6D;AAE7D,MAAa,gCAAgC;IAG3C,YAA6B,QAAmC;QAAnC,aAAQ,GAAR,QAAQ,CAA2B;IAAG,CAAC;IAEpE,IAAI,SAAS;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC5B,MAAM,IAAI,+BAAyB,CACjC,kCAAkC,EAClC,qFAAqF,CACtF,CAAC;SACH;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;IACjC,CAAC;IAED,IAAI,OAAO;QACT,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YAC1B,MAAM,IAAI,+BAAyB,CACjC,+BAA+B,EAC/B,+EAA+E,CAChF,CAAC;SACH;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,MAAM,CACX,OAAkC;QAElC,OAAO,IAAI,gCAAgC,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,cAAc;QACZ,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;IAEK,WAAW,CAAC,OAAe;;YAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;gBAC9B,MAAM,IAAI,+BAAyB,CACjC,+BAA+B,EAC/B,2GAA2G,CAC5G,CAAC;aACH;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC;KAAA;IAED,qBAAqB;QACnB,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IACnD,CAAC;IAEK,kBAAkB,CACtB,OAA2B;;YAE3B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE;gBACrC,MAAM,IAAI,+BAAyB,CACjC,+BAA+B,EAC/B,2GAA2G,CAC5G,CAAC;aACH;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC;KAAA;CACF;AA5DD,4EA4DC","sourcesContent":["import type {\n  Address,\n  DialectAptosWalletAdapter,\n  PublicKey,\n  SignMessagePayload,\n  SignMessageResponse,\n} from './dialect-aptos-wallet-adapter.interface';\nimport { UnsupportedOperationError } from '@dialectlabs/sdk';\n\nexport class DialectAptosWalletAdapterWrapper\n  implements DialectAptosWalletAdapter\n{\n  constructor(private readonly delegate: DialectAptosWalletAdapter) {}\n\n  get publicKey(): PublicKey {\n    if (!this.delegate.publicKey) {\n      throw new UnsupportedOperationError(\n        'Account public key not available',\n        'Wallet does not have account public key, please provide a valid account public key.',\n      );\n    }\n    return this.delegate.publicKey;\n  }\n\n  get address(): Address {\n    if (!this.delegate.address) {\n      throw new UnsupportedOperationError(\n        'Account address not available',\n        'Wallet does not have account address, please provide a valid account address.',\n      );\n    }\n    return this.delegate.address;\n  }\n\n  static create(\n    adapter: DialectAptosWalletAdapter,\n  ): DialectAptosWalletAdapterWrapper {\n    return new DialectAptosWalletAdapterWrapper(adapter);\n  }\n\n  canSignMessage(): boolean {\n    return Boolean(this.delegate.signMessage);\n  }\n\n  async signMessage(message: string): Promise<string> {\n    if (!this.delegate.signMessage) {\n      throw new UnsupportedOperationError(\n        'Message signing not supported',\n        'Wallet does not support message signing, please use wallet-adapter that supports signMessage() operation.',\n      );\n    }\n    return this.delegate.signMessage(message);\n  }\n\n  canSignMessagePayload(): boolean {\n    return Boolean(this.delegate.signMessagePayload);\n  }\n\n  async signMessagePayload(\n    payload: SignMessagePayload,\n  ): Promise<SignMessageResponse> {\n    if (!this.delegate.signMessagePayload) {\n      throw new UnsupportedOperationError(\n        'Message signing not supported',\n        'Wallet does not support message signing, please use wallet-adapter that supports signMessage() operation.',\n      );\n    }\n    return this.delegate.signMessagePayload(payload);\n  }\n}\n"]}