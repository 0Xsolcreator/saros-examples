"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeDialectAptosWalletAdapter = void 0;
const tslib_1 = require("tslib");
const aptos_1 = require("aptos");
class NodeDialectAptosWalletAdapter {
    constructor(account) {
        this.account = account;
    }
    get address() {
        return this.account.address().toString();
    }
    get publicKey() {
        return this.account.pubKey().toString();
    }
    static create(privateKey) {
        if (privateKey) {
            const account = new aptos_1.AptosAccount(privateKey);
            console.log(`Initializing ${NodeDialectAptosWalletAdapter.name} using provided ${account.pubKey()} public key and ${account.address()} address.`);
            return new NodeDialectAptosWalletAdapter(account);
        }
        else if (process.env.DIALECT_SDK_CREDENTIALS) {
            const privateKeyRaw = process.env.DIALECT_SDK_CREDENTIALS;
            const privateKey = new Uint8Array(JSON.parse(privateKeyRaw));
            const account = new aptos_1.AptosAccount(privateKey);
            console.log(`Initializing ${NodeDialectAptosWalletAdapter.name} using provided ${account.pubKey()} public key and ${account.address()} address.`);
            return new NodeDialectAptosWalletAdapter(account);
        }
        else {
            throw new Error(`Error initializing ${NodeDialectAptosWalletAdapter.name}: SDK credential must be provided.`);
        }
    }
    signMessage(message) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.account
                .signBuffer(new TextEncoder().encode(message))
                .toString();
        });
    }
    signMessagePayload(payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const prefix = `APTOS`;
            const fullMessage = `${prefix}\nmessage: ${payload.message}\nnonce: ${payload.nonce}`;
            const signature = this.account
                .signBuffer(new TextEncoder().encode(fullMessage))
                .toString();
            return {
                prefix,
                message: payload.message,
                nonce: payload.nonce,
                fullMessage,
                signature,
            };
        });
    }
}
exports.NodeDialectAptosWalletAdapter = NodeDialectAptosWalletAdapter;
//# sourceMappingURL=node-dialect-aptos-wallet-adapter.js.map