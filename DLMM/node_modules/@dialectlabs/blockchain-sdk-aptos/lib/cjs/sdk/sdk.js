"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosSdkFactory = void 0;
const sdk_1 = require("@dialectlabs/sdk");
const dialect_aptos_wallet_adapter_wrapper_1 = require("../wallet-adapter/dialect-aptos-wallet-adapter-wrapper");
const encryption_keys_provider_1 = require("../encryption/encryption-keys-provider");
const aptos_ed25519_authentication_facade_factory_1 = require("../auth/ed25519/aptos-ed25519-authentication-facade-factory");
const aptos_ed25519_token_signer_1 = require("../auth/ed25519/aptos-ed25519-token-signer");
const aptos_ed25519_payload_authentication_facade_factory_1 = require("../auth/ed25519-payload/aptos-ed25519-payload-authentication-facade-factory");
const aptos_ed25519_payload_token_signer_1 = require("../auth/ed25519-payload/aptos-ed25519-payload-token-signer");
const constants_1 = require("./constants");
class AptosSdkFactory {
    constructor(aptosConfigProps) {
        this.aptosConfigProps = aptosConfigProps;
    }
    static create(props) {
        return new AptosSdkFactory(props);
    }
    static logConfiguration(config, environment) {
        if (environment !== 'production') {
            console.log(`Initializing Dialect Aptos SDK using configuration:
Aptos settings:
  Wallet public key: ${config.wallet.publicKey}
  Wallet address: ${config.wallet.address}
`);
        }
    }
    create(config) {
        const aptosConfig = this.initializeAptosConfig();
        AptosSdkFactory.logConfiguration(aptosConfig, config.environment);
        const wallet = aptosConfig.wallet;
        const walletAdapterEncryptionKeysProvider = new encryption_keys_provider_1.DialectAptosWalletAdapterEncryptionKeysProvider(wallet);
        const encryptionKeysProvider = sdk_1.EncryptionKeysProvider.create(walletAdapterEncryptionKeysProvider, config.encryptionKeysStore);
        const authenticationFacade = this.initializeAuthenticationFacade(wallet);
        return {
            type: constants_1.DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS,
            info: {
                supportsOnChainMessaging: false,
            },
            encryptionKeysProvider,
            authenticationFacade,
            config: aptosConfig,
        };
    }
    initializeAuthenticationFacade(wallet) {
        if (wallet.canSignMessage()) {
            return new aptos_ed25519_authentication_facade_factory_1.AptosEd25519AuthenticationFacadeFactory(new aptos_ed25519_token_signer_1.DialectWalletAdapterAptosEd25519TokenSigner(wallet)).get();
        }
        if (wallet.canSignMessagePayload()) {
            return new aptos_ed25519_payload_authentication_facade_factory_1.AptosEd25519PayloadAuthenticationFacadeFactory(new aptos_ed25519_payload_token_signer_1.DialectWalletAdapterAptosEd25519PayloadTokenSigner(wallet)).get();
        }
        throw new sdk_1.IllegalArgumentError('Wallet does not support signing', 'Wallet does not support signing');
    }
    initializeAptosConfig() {
        const wallet = new dialect_aptos_wallet_adapter_wrapper_1.DialectAptosWalletAdapterWrapper(this.aptosConfigProps.wallet);
        return {
            wallet,
        };
    }
}
exports.AptosSdkFactory = AptosSdkFactory;
//# sourceMappingURL=sdk.js.map