{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../../src/sdk/sdk.ts"],"names":[],"mappings":";;;AAMA,0CAAgF;AAEhF,iHAA0G;AAC1G,qFAAyG;AACzG,6HAAsH;AACtH,2FAAyG;AACzG,qJAA6I;AAC7I,mHAAgI;AAChI,2CAAgE;AAchE,MAAa,eAAe;IAC1B,YAA6B,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAG,CAAC;IAEnE,MAAM,CAAC,MAAM,CAAC,KAAuB;QACnC,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAC7B,MAAmB,EACnB,WAAwB;QAExB,IAAI,WAAW,KAAK,YAAY,EAAE;YAChC,OAAO,CAAC,GAAG,CACT;;uBAEe,MAAM,CAAC,MAAM,CAAC,SAAS;oBAC1B,MAAM,CAAC,MAAM,CAAC,OAAO;CACxC,CACM,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,MAAc;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjD,eAAe,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAClE,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;QAClC,MAAM,mCAAmC,GACvC,IAAI,0EAA+C,CAAC,MAAM,CAAC,CAAC;QAC9D,MAAM,sBAAsB,GAAG,4BAAsB,CAAC,MAAM,CAC1D,mCAAmC,EACnC,MAAM,CAAC,mBAAmB,CAC3B,CAAC;QACF,MAAM,oBAAoB,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC;QACzE,OAAO;YACL,IAAI,EAAE,6CAAiC;YACvC,IAAI,EAAE;gBACJ,wBAAwB,EAAE,KAAK;aAChC;YACD,sBAAsB;YACtB,oBAAoB;YACpB,MAAM,EAAE,WAAW;SACpB,CAAC;IACJ,CAAC;IAEO,8BAA8B,CACpC,MAAwC;QAExC,IAAI,MAAM,CAAC,cAAc,EAAE,EAAE;YAC3B,OAAO,IAAI,qFAAuC,CAChD,IAAI,wEAA2C,CAAC,MAAM,CAAC,CACxD,CAAC,GAAG,EAAE,CAAC;SACT;QACD,IAAI,MAAM,CAAC,qBAAqB,EAAE,EAAE;YAClC,OAAO,IAAI,oGAA8C,CACvD,IAAI,uFAAkD,CAAC,MAAM,CAAC,CAC/D,CAAC,GAAG,EAAE,CAAC;SACT;QACD,MAAM,IAAI,0BAAoB,CAC5B,iCAAiC,EACjC,iCAAiC,CAClC,CAAC;IACJ,CAAC;IAEO,qBAAqB;QAC3B,MAAM,MAAM,GAAG,IAAI,uEAAgC,CACjD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC7B,CAAC;QACF,OAAO;YACL,MAAM;SACP,CAAC;IACJ,CAAC;CACF;AAvED,0CAuEC","sourcesContent":["import type {\n  BlockchainSdk,\n  BlockchainSdkFactory,\n  Config,\n  Environment,\n} from '@dialectlabs/sdk';\nimport { EncryptionKeysProvider, IllegalArgumentError } from '@dialectlabs/sdk';\nimport type { DialectAptosWalletAdapter } from '../wallet-adapter/dialect-aptos-wallet-adapter.interface';\nimport { DialectAptosWalletAdapterWrapper } from '../wallet-adapter/dialect-aptos-wallet-adapter-wrapper';\nimport { DialectAptosWalletAdapterEncryptionKeysProvider } from '../encryption/encryption-keys-provider';\nimport { AptosEd25519AuthenticationFacadeFactory } from '../auth/ed25519/aptos-ed25519-authentication-facade-factory';\nimport { DialectWalletAdapterAptosEd25519TokenSigner } from '../auth/ed25519/aptos-ed25519-token-signer';\nimport { AptosEd25519PayloadAuthenticationFacadeFactory } from '../auth/ed25519-payload/aptos-ed25519-payload-authentication-facade-factory';\nimport { DialectWalletAdapterAptosEd25519PayloadTokenSigner } from '../auth/ed25519-payload/aptos-ed25519-payload-token-signer';\nimport { DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS } from './constants';\n\nexport interface AptosConfigProps {\n  wallet: DialectAptosWalletAdapter;\n}\n\nexport interface AptosConfig extends AptosConfigProps {\n  wallet: DialectAptosWalletAdapterWrapper;\n}\n\nexport interface Aptos extends BlockchainSdk {\n  readonly config: AptosConfig;\n}\n\nexport class AptosSdkFactory implements BlockchainSdkFactory<Aptos> {\n  private constructor(readonly aptosConfigProps: AptosConfigProps) {}\n\n  static create(props: AptosConfigProps) {\n    return new AptosSdkFactory(props);\n  }\n\n  private static logConfiguration(\n    config: AptosConfig,\n    environment: Environment,\n  ) {\n    if (environment !== 'production') {\n      console.log(\n        `Initializing Dialect Aptos SDK using configuration:\nAptos settings:\n  Wallet public key: ${config.wallet.publicKey}\n  Wallet address: ${config.wallet.address}\n`,\n      );\n    }\n  }\n\n  create(config: Config): Aptos {\n    const aptosConfig = this.initializeAptosConfig();\n    AptosSdkFactory.logConfiguration(aptosConfig, config.environment);\n    const wallet = aptosConfig.wallet;\n    const walletAdapterEncryptionKeysProvider =\n      new DialectAptosWalletAdapterEncryptionKeysProvider(wallet);\n    const encryptionKeysProvider = EncryptionKeysProvider.create(\n      walletAdapterEncryptionKeysProvider,\n      config.encryptionKeysStore,\n    );\n    const authenticationFacade = this.initializeAuthenticationFacade(wallet);\n    return {\n      type: DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS,\n      info: {\n        supportsOnChainMessaging: false,\n      },\n      encryptionKeysProvider,\n      authenticationFacade,\n      config: aptosConfig,\n    };\n  }\n\n  private initializeAuthenticationFacade(\n    wallet: DialectAptosWalletAdapterWrapper,\n  ) {\n    if (wallet.canSignMessage()) {\n      return new AptosEd25519AuthenticationFacadeFactory(\n        new DialectWalletAdapterAptosEd25519TokenSigner(wallet),\n      ).get();\n    }\n    if (wallet.canSignMessagePayload()) {\n      return new AptosEd25519PayloadAuthenticationFacadeFactory(\n        new DialectWalletAdapterAptosEd25519PayloadTokenSigner(wallet),\n      ).get();\n    }\n    throw new IllegalArgumentError(\n      'Wallet does not support signing',\n      'Wallet does not support signing',\n    );\n  }\n\n  private initializeAptosConfig(): AptosConfig {\n    const wallet = new DialectAptosWalletAdapterWrapper(\n      this.aptosConfigProps.wallet,\n    );\n    return {\n      wallet,\n    };\n  }\n}\n"]}