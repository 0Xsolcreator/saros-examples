{"version":3,"file":"aptos-ed25519-payload-token-validator.js","sourceRoot":"","sources":["../../../../src/auth/ed25519-payload/aptos-ed25519-payload-token-validator.ts"],"names":[],"mappings":";;;AAAA,yCAAiC;AAEjC,6FAA8F;AAC9F,yEAAyE;AACzE,+EAA6E;AAC7E,0CAK0B;AAC1B,iCAAkC;AAClC,8CAAkD;AAElD,MAAa,iCAAkC,SAAQ,oBAAc;IACnE,WAAW,CAAC,WAAwB;QAClC,OAAO,WAAW,CAAC,GAAG,KAAK,2EAAsC,CAAC;IACpE,CAAC;IAEQ,gBAAgB,CAAC,KAAY;QACpC,MAAM,aAAa,GAAG,IAAA,sBAAa,EAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACtD,OAAO,gBAAI,CAAC,QAAQ,CAAC,MAAM,CACzB,aAAa,EACb,KAAK,CAAC,SAAS,EACf,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CACzB,CAAC;IACJ,CAAC;IAEQ,sBAAsB,CAAC,KAAY;QAC1C,MAAM,OAAO,GAAG,IAAA,4CAAsB,EACpC,iBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CACnD,CAAC,QAAQ,EAAE,CAAC;QACb,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAEO,YAAY,CAAC,KAAY;QAC/B,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;QAC3C,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,yBAAmB,CAC3B,6CAA6C,CAC9C,CAAC;SACH;QACD,MAAM,SAAS,GAAG,iBAAS,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACpD,OAAO,IAAA,gDAAuB,EAAC,SAAS,CAAC,CAAC,YAAY,EAAE,CAAC;IAC3D,CAAC;CACF;AA/BD,8EA+BC","sourcesContent":["import { sign } from 'tweetnacl';\n\nimport { APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG } from './aptos-ed25519-payload-token-signer';\nimport { getAptosAccountAddress } from '../../utils/aptos-account-utils';\nimport { getPublicKeyWithPadding } from '../../utils/aptos-public-key-utils';\nimport {\n  AuthenticationError,\n  Token,\n  TokenHeader,\n  TokenValidator,\n} from '@dialectlabs/sdk';\nimport { HexString } from 'aptos';\nimport { decodeURLSafe } from '@stablelib/base64';\n\nexport class AptosEd25519PayloadTokenValidator extends TokenValidator {\n  canValidate(tokenHeader: TokenHeader): boolean {\n    return tokenHeader.alg === APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG;\n  }\n\n  override isSignatureValid(token: Token): boolean {\n    const signedPayload = decodeURLSafe(token.base64Body);\n    return sign.detached.verify(\n      signedPayload,\n      token.signature,\n      this.getPublicKey(token),\n    );\n  }\n\n  override performExtraValidation(token: Token): boolean {\n    const address = getAptosAccountAddress(\n      HexString.fromUint8Array(this.getPublicKey(token)),\n    ).toString();\n    return BigInt(token.body.sub) === BigInt(address);\n  }\n\n  private getPublicKey(token: Token): Uint8Array {\n    const signerPublicKey = token.body.sub_jwk;\n    if (!signerPublicKey) {\n      throw new AuthenticationError(\n        'Cannot validate token without sub_jwk claim',\n      );\n    }\n    const hexPubKey = HexString.ensure(signerPublicKey);\n    return getPublicKeyWithPadding(hexPubKey).toUint8Array();\n  }\n}\n"]}