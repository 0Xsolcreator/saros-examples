"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialectWalletAdapterAptosEd25519PayloadTokenSigner = exports.AptosEd25519PayloadTokenSigner = exports.APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG = void 0;
const tslib_1 = require("tslib");
const aptos_1 = require("aptos");
const aptos_public_key_1 = require("../aptos-public-key");
const constants_1 = require("../../sdk/constants");
const tweetnacl_1 = require("tweetnacl");
exports.APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG = `${constants_1.DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS}-ed25519-payload`;
class AptosEd25519PayloadTokenSigner {
    constructor() {
        this.alg = exports.APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG;
    }
}
exports.AptosEd25519PayloadTokenSigner = AptosEd25519PayloadTokenSigner;
class DialectWalletAdapterAptosEd25519PayloadTokenSigner extends AptosEd25519PayloadTokenSigner {
    constructor(dialectWalletAdapter) {
        super();
        this.dialectWalletAdapter = dialectWalletAdapter;
    }
    get subject() {
        const address = this.dialectWalletAdapter.address;
        const hexString = aptos_1.HexString.ensure(address.toString());
        return hexString.toString();
    }
    get subjectPublicKey() {
        const publicKey = this.dialectWalletAdapter.publicKey;
        const hexString = aptos_1.HexString.ensure(publicKey.toString());
        return new aptos_public_key_1.AptosPubKey(hexString);
    }
    sign(payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const message = new TextDecoder().decode(payload);
            const { fullMessage, signature: rawSignature } = yield this.dialectWalletAdapter.signMessagePayload({
                message,
                nonce: aptos_1.HexString.fromUint8Array((0, tweetnacl_1.randomBytes)(32)).toString(),
            });
            const hexSignature = aptos_1.HexString.ensure(rawSignature);
            const signature = hexSignature.toUint8Array();
            return {
                payload: new TextEncoder().encode(fullMessage),
                signature,
            };
        });
    }
}
exports.DialectWalletAdapterAptosEd25519PayloadTokenSigner = DialectWalletAdapterAptosEd25519PayloadTokenSigner;
//# sourceMappingURL=aptos-ed25519-payload-token-signer.js.map