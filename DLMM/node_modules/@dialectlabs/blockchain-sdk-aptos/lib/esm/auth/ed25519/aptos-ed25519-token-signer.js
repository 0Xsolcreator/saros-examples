import { HexString } from 'aptos';
import { AptosPubKey } from '../aptos-public-key';
import { DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS } from '../../sdk/constants';
export const APTOS_ED25519_TOKEN_SIGNER_ALG = `${DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS}-ed25519`;
export class AptosEd25519TokenSigner {
    constructor() {
        this.alg = APTOS_ED25519_TOKEN_SIGNER_ALG;
    }
}
export class DialectWalletAdapterAptosEd25519TokenSigner extends AptosEd25519TokenSigner {
    constructor(dialectWalletAdapter) {
        super();
        this.dialectWalletAdapter = dialectWalletAdapter;
    }
    get subject() {
        const address = this.dialectWalletAdapter.address;
        const hexString = HexString.ensure(address.toString());
        return hexString.toString();
    }
    get subjectPublicKey() {
        const publicKey = this.dialectWalletAdapter.publicKey;
        const hexString = HexString.ensure(publicKey.toString());
        return new AptosPubKey(hexString);
    }
    async sign(payload) {
        const stringPayload = new TextDecoder().decode(payload);
        const signatureString = await this.dialectWalletAdapter.signMessage(stringPayload);
        const hexString = HexString.ensure(signatureString);
        const signature = hexString.toUint8Array();
        return {
            payload,
            signature,
        };
    }
}
//# sourceMappingURL=aptos-ed25519-token-signer.js.map