import { HexString } from 'aptos';
import { AptosPubKey } from '../aptos-public-key';
import { DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS } from '../../sdk/constants';
import { randomBytes } from 'tweetnacl';
export const APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG = `${DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS}-ed25519-payload`;
export class AptosEd25519PayloadTokenSigner {
    constructor() {
        this.alg = APTOS_ED25519_PAYLOAD_TOKEN_SIGNER_ALG;
    }
}
export class DialectWalletAdapterAptosEd25519PayloadTokenSigner extends AptosEd25519PayloadTokenSigner {
    constructor(dialectWalletAdapter) {
        super();
        this.dialectWalletAdapter = dialectWalletAdapter;
    }
    get subject() {
        const address = this.dialectWalletAdapter.address;
        const hexString = HexString.ensure(address.toString());
        return hexString.toString();
    }
    get subjectPublicKey() {
        const publicKey = this.dialectWalletAdapter.publicKey;
        const hexString = HexString.ensure(publicKey.toString());
        return new AptosPubKey(hexString);
    }
    async sign(payload) {
        const message = new TextDecoder().decode(payload);
        const { fullMessage, signature: rawSignature } = await this.dialectWalletAdapter.signMessagePayload({
            message,
            nonce: HexString.fromUint8Array(randomBytes(32)).toString(),
        });
        const hexSignature = HexString.ensure(rawSignature);
        const signature = hexSignature.toUint8Array();
        return {
            payload: new TextEncoder().encode(fullMessage),
            signature,
        };
    }
}
//# sourceMappingURL=aptos-ed25519-payload-token-signer.js.map