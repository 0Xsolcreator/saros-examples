import { AptosAccount } from 'aptos';
export class NodeDialectAptosWalletAdapter {
    constructor(account) {
        this.account = account;
    }
    get address() {
        return this.account.address().toString();
    }
    get publicKey() {
        return this.account.pubKey().toString();
    }
    static create(privateKey) {
        if (privateKey) {
            const account = new AptosAccount(privateKey);
            console.log(`Initializing ${NodeDialectAptosWalletAdapter.name} using provided ${account.pubKey()} public key and ${account.address()} address.`);
            return new NodeDialectAptosWalletAdapter(account);
        }
        else if (process.env.DIALECT_SDK_CREDENTIALS) {
            const privateKeyRaw = process.env.DIALECT_SDK_CREDENTIALS;
            const privateKey = new Uint8Array(JSON.parse(privateKeyRaw));
            const account = new AptosAccount(privateKey);
            console.log(`Initializing ${NodeDialectAptosWalletAdapter.name} using provided ${account.pubKey()} public key and ${account.address()} address.`);
            return new NodeDialectAptosWalletAdapter(account);
        }
        else {
            throw new Error(`Error initializing ${NodeDialectAptosWalletAdapter.name}: SDK credential must be provided.`);
        }
    }
    async signMessage(message) {
        return this.account
            .signBuffer(new TextEncoder().encode(message))
            .toString();
    }
    async signMessagePayload(payload) {
        const prefix = `APTOS`;
        const fullMessage = `${prefix}\nmessage: ${payload.message}\nnonce: ${payload.nonce}`;
        const signature = this.account
            .signBuffer(new TextEncoder().encode(fullMessage))
            .toString();
        return {
            prefix,
            message: payload.message,
            nonce: payload.nonce,
            fullMessage,
            signature,
        };
    }
}
//# sourceMappingURL=node-dialect-aptos-wallet-adapter.js.map