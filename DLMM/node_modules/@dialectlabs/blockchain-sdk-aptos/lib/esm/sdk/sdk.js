import { EncryptionKeysProvider, IllegalArgumentError } from '@dialectlabs/sdk';
import { DialectAptosWalletAdapterWrapper } from '../wallet-adapter/dialect-aptos-wallet-adapter-wrapper';
import { DialectAptosWalletAdapterEncryptionKeysProvider } from '../encryption/encryption-keys-provider';
import { AptosEd25519AuthenticationFacadeFactory } from '../auth/ed25519/aptos-ed25519-authentication-facade-factory';
import { DialectWalletAdapterAptosEd25519TokenSigner } from '../auth/ed25519/aptos-ed25519-token-signer';
import { AptosEd25519PayloadAuthenticationFacadeFactory } from '../auth/ed25519-payload/aptos-ed25519-payload-authentication-facade-factory';
import { DialectWalletAdapterAptosEd25519PayloadTokenSigner } from '../auth/ed25519-payload/aptos-ed25519-payload-token-signer';
import { DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS } from './constants';
export class AptosSdkFactory {
    constructor(aptosConfigProps) {
        this.aptosConfigProps = aptosConfigProps;
    }
    static create(props) {
        return new AptosSdkFactory(props);
    }
    static logConfiguration(config, environment) {
        if (environment !== 'production') {
            console.log(`Initializing Dialect Aptos SDK using configuration:
Aptos settings:
  Wallet public key: ${config.wallet.publicKey}
  Wallet address: ${config.wallet.address}
`);
        }
    }
    create(config) {
        const aptosConfig = this.initializeAptosConfig();
        AptosSdkFactory.logConfiguration(aptosConfig, config.environment);
        const wallet = aptosConfig.wallet;
        const walletAdapterEncryptionKeysProvider = new DialectAptosWalletAdapterEncryptionKeysProvider(wallet);
        const encryptionKeysProvider = EncryptionKeysProvider.create(walletAdapterEncryptionKeysProvider, config.encryptionKeysStore);
        const authenticationFacade = this.initializeAuthenticationFacade(wallet);
        return {
            type: DIALECT_BLOCKCHAIN_SDK_TYPE_APTOS,
            info: {
                supportsOnChainMessaging: false,
            },
            encryptionKeysProvider,
            authenticationFacade,
            config: aptosConfig,
        };
    }
    initializeAuthenticationFacade(wallet) {
        if (wallet.canSignMessage()) {
            return new AptosEd25519AuthenticationFacadeFactory(new DialectWalletAdapterAptosEd25519TokenSigner(wallet)).get();
        }
        if (wallet.canSignMessagePayload()) {
            return new AptosEd25519PayloadAuthenticationFacadeFactory(new DialectWalletAdapterAptosEd25519PayloadTokenSigner(wallet)).get();
        }
        throw new IllegalArgumentError('Wallet does not support signing', 'Wallet does not support signing');
    }
    initializeAptosConfig() {
        const wallet = new DialectAptosWalletAdapterWrapper(this.aptosConfigProps.wallet);
        return {
            wallet,
        };
    }
}
//# sourceMappingURL=sdk.js.map